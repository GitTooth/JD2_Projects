package com.epam.testapp.service;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

import com.epam.testapp.model.Messages;

import org.apache.log4j.Logger;

@Aspect
@Component
public class LoggingAspect{
	
	private static final Logger logger = Logger.getLogger(Aspects.class);
	
	@Pointcut("execution(* com.epam.testapp.dao.*.*(..))")
	private void forDAO() {}
	
	@Pointcut("execution(* com.epam.testapp.service.*.*(..))")
	private void forService() {}

	@Pointcut("forDAO() || forService()")
	private void forAppFlow() {}
	
	@Pointcut("execution(* com.epam.testapp.form.ProcessCommand.show(..))")
	private void forShow() {}
	
	@Pointcut("execution(* com.epam.testapp.form.ProcessCommand.addNews(..))")
	private void forAdd() {}
	
	@Pointcut("forShow() || forAdd()")
	private void forForm() {}
	
	@Before("forAppFlow()")
	public void before(JoinPoint theJoinPoint) {
		
		String method = theJoinPoint.getSignature().toShortString();
		logger.info("====> calling method: " + method);
		
		Object[] args = theJoinPoint.getArgs();
		
		for(Object temp:args) {
			logger.info("====> args: " + temp);
		}
	}
	
	@AfterReturning(pointcut = "forAppFlow()")
	public void afterReturning(JoinPoint theJoinPoint, Object result) {
		String method = theJoinPoint.getSignature().toShortString();
		logger.info("====> calling method: " + method);
		
		Object[] args = theJoinPoint.getArgs();
		
		for(Object temp:args) {
			logger.info("====> args: " + temp);
		}
	}	
	
	@After("forForm()")
	private void cleanMessage(){
		Messages.message = "";
		Messages.result = "";
	}
}
